#!/usr/bin/env python3

import argparse
import os
import sys
from datetime import datetime
import time
import pickle
from DMSconfig import ad_string, ad_address, ad_user, ad_password, hard_pins, door_layout, common_doors, server_doors, electrical_doors, garage_doors, common_badges, server_badges, electrical_badges, garage_badges

# Where to store the cache
picklepath = '/root/dms_ad_pickle'

# Log path
log_path = '/root/dms_dev_log'

# Cache age thresholds in seconds
age_max = 86400.0
age_min = 300.0


def stamp():
    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%d %H:%M:%S.") + str(round(int(now.strftime("%f")) / 1000)).zfill(3)
    return timestamp


def get_badges():
    from ldap3 import Server, Connection, ALL, NTLM
    server = Server(ad_address, get_info=ALL)
    conn = Connection(server, user=ad_user, password=ad_password, authentication=NTLM)
    conn.bind()
    badge_list = []
    conn.search("ou=Members,dc=dms,dc=local", ad_string, attributes=['employeeID'])
    for entry in conn.entries:
        badge_list.append(str(entry['employeeID'].value).lstrip('0'))
    return badge_list


def cache_write(badge_list):
    with open(picklepath, 'wb') as handle:
        pickle.dump(badge_list, handle)


def cache_load():
    with open(picklepath, 'rb') as handle:
        badge_list = pickle.load(handle)
    return badge_list


def cache_age():
    modified = os.path.getmtime(picklepath)
    current = time.time()
    delta = current - modified
    return delta


def verify_pin(door, pin):
    return True if pin in hard_pins else False


def verify_badge(door, badge):
    try:
        badge_list = cache_load()
    except:
        os.system('echo {} - Updating the badge cache because there is none >> {}'.format(stamp(), log_path))
        badge_list = get_badges()
        cache_write(badge_list)

    badge_list.extend(common_badges)

    if badge not in badge_list and cache_age() > age_min:
        os.system('echo {} - Updating the badge cache because a badge failed >> {}'.format(stamp(), log_path))
        badge_list = get_badges()
        cache_write(badge_list)

    if cache_age() > age_max:
        os.system('echo %s - Updating the badge cache because it is too old >> {}'.format(stamp(), log_path))
        badge_list = get_badges()
        cache_write(badge_list)

    badge_list.extend(common_badges)

    if door in common_doors:
        return True if badge in badge_list else False

    if door in server_doors:
        return True if badge in server_badges else False

    if door in electrical_doors:
        return True if badge in electrical_badges else False

    if door in garage_doors:
        return True if badge in garage_badges else False

    return False


def open_door(door):
    # return
    door = door_layout[door]
    command = 'DMSrelay -r %s' % (door)
    os.system('echo %s - %s >> %s' % (stamp(), command, log_path))
    os.system(command + ' &')


def main():
    # return
    os.system('echo %s - %s >> %s' % (stamp(), " ".join(sys.argv[:]), log_path))

    parser = argparse.ArgumentParser(description='Opens doors based on badge or pin numbers')
    parser.add_argument('-d', '--door', nargs=1, required=True, help='Which door to open')
    
    auth_group = parser.add_mutually_exclusive_group(required=True)
    auth_group.add_argument('-b', '--badge', nargs=1, help='Badge number for authentication')
    auth_group.add_argument('-p', '--pin', nargs=1, help='Pin number for authentication')

    args = parser.parse_args()
    door = str(args.door[0])

    try:
        door_layout[door]
    except:
        os.system('echo {} - Received invalid door number {} >> {}'.format(stamp(), door, log_path))
        return

    try:
        pin = args.pin[0]
        if verify_pin(door, pin):
            open_door(door)
        else:
            os.system('echo {} - Pin failed for door {} {} >> {}'.format(stamp(), door, pin, log_path))
    except TypeError:
        pass
    
    try:
        badge = str(args.badge[0]).lstrip('0')
        if verify_badge(door, badge):
            open_door(door)
        else:
            os.system('echo {} - Badge failed for door {} {} >> {}'.format(stamp(), door, badge, log_path))

    except TypeError:
        pass


if __name__ == "__main__":
    main()
